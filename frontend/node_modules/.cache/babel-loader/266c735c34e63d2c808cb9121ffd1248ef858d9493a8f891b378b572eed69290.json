{"ast":null,"code":"var _jsxFileName = \"E:\\\\AN3\\\\SEM2\\\\project-MichiMauser\\\\frontend\\\\src\\\\pages\\\\webSocket\\\\WebSocketMsg.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Button, Form, Dropdown, ListGroup, Container, Row, Col } from 'react-bootstrap';\nimport axios from 'axios';\nimport NavBar from \"../../components/Navbar\";\nimport { LoggedUserContext } from '../../context/LoggedUserContext';\nimport \"../../styles/ChatGroup.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GroupChatApp() {\n  _s();\n  const [groups, setGroups] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [inputValueSend, setInputValueSend] = useState('');\n  const [inputValueGroup, setInputValueGroup] = useState('');\n  const [notifications, setNotifications] = useState([]);\n  const {\n    loggedUser\n  } = useContext(LoggedUserContext);\n\n  // Fetch groups function\n  const fetchGroups = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/group');\n      setGroups(response.data);\n    } catch (err) {\n      console.error('GET /group failed:', err);\n    }\n  };\n  useEffect(() => {\n    fetchGroups();\n  }, []);\n\n  // Poll messages every 2 seconds\n  useEffect(() => {\n    if (!selectedGroup) return;\n    const group = groups.find(g => g.name === selectedGroup);\n    if (!group) return;\n    const fetchMessages = async () => {\n      try {\n        const res = await axios.get(`http://localhost:8080/message/${group.id}`);\n        setMessages(res.data);\n      } catch (err) {\n        console.error('Polling error:', err);\n      }\n    };\n    fetchMessages(); // Initial fetch\n\n    const interval = setInterval(fetchMessages, 2000); // Changed to 2 seconds for better performance\n\n    return () => clearInterval(interval); // Cleanup\n  }, [selectedGroup, groups]);\n  const handleSend = async () => {\n    if (!inputValueSend.trim() || !selectedGroup) return;\n    const group = groups.find(g => g.name === selectedGroup);\n    if (!group) {\n      console.error(\"Selected group not found\");\n      return;\n    }\n\n    // Adjust payload property name to match backend 'content' or 'text'\n    const messagePayload = {\n      sender: `${loggedUser.firstName + \" \" + loggedUser.lastName}`,\n      message: inputValueSend\n    };\n    try {\n      console.log(`${loggedUser.firstName}`);\n      await axios.post(`http://localhost:8080/message/post?groupChatId=${group.id}`, messagePayload);\n      const response = await axios.get(`http://localhost:8080/message/${group.id}`);\n      setMessages(response.data);\n      setInputValueSend('');\n    } catch (err) {\n      console.error('Sending message failed:', err);\n    }\n  };\n  const handleCreateGroup = async e => {\n    e.preventDefault();\n    if (!inputValueGroup.trim()) return;\n    try {\n      // Create the group and get the response with the actual group data\n      const response = await axios.post('http://localhost:8080/group/create', {\n        name: inputValueGroup\n      });\n\n      // Refresh the groups list to get the latest data with correct IDs\n      await fetchGroups();\n\n      // Set the selected group to the newly created one\n      setSelectedGroup(inputValueGroup);\n      setInputValue('');\n\n      // Add success notification\n      setNotifications(prev => [...prev, `Group \"${inputValue}\" created successfully!`]);\n    } catch (err) {\n      console.error('Create group error:', err);\n      setNotifications(prev => [...prev, `Failed to create group: ${err.message}`]);\n    }\n  };\n\n  // Helper function to display message text reliably\n  const getMessageText = msg => {\n    return msg.content || msg.text || msg.message || '[No message]';\n  };\n\n  // Helper function to format timestamp\n  const formatTimestamp = timestamp => {\n    if (!timestamp) return '';\n    const date = new Date(timestamp);\n    const now = new Date();\n    const isToday = date.toDateString() === now.toDateString();\n    if (isToday) {\n      // Show only time if message is from today\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    } else {\n      // Show date and time if message is from another day\n      return date.toLocaleString([], {\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"group-chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-main-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"chat-header\",\n          children: \"\\uD83D\\uDCAC Group Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-controls\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"group-dropdown\",\n                children: /*#__PURE__*/_jsxDEV(Dropdown, {\n                  onSelect: setSelectedGroup,\n                  children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n                    className: \"w-100\",\n                    children: selectedGroup || 'Select Group'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 142,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n                    children: groups.map((g, i) => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                      eventKey: g.name,\n                      children: g.name\n                    }, i, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 147,\n                      columnNumber: 49\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 145,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(Form, {\n                onSubmit: handleCreateGroup,\n                className: \"create-group-form\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  placeholder: \"Create new group...\",\n                  value: inputValue,\n                  onChange: e => setInputValue(e.target.value),\n                  className: \"create-group-input\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  className: \"create-group-btn\",\n                  children: \"\\u2728 Create Group\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), selectedGroup ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"chat-title\",\n            children: [\"\\uD83D\\uDCE8 Messages in \", selectedGroup]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n            className: \"messages-container\",\n            children: messages.length > 0 ? messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: \"message-item\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-content\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-text\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"message-sender\",\n                    children: msg.sender || 'Unknown'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 49\n                  }, this), getMessageText(msg)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"message-timestamp\",\n                  children: formatTimestamp(msg.timestamp)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 41\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 37\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"empty-state\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"empty-state-icon\",\n                children: \"\\uD83D\\uDCAD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No messages yet. Start the conversation!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            className: \"message-input-form\",\n            onSubmit: e => {\n              e.preventDefault();\n              handleSend();\n            },\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Type your message...\",\n              value: inputValue,\n              onChange: e => setInputValue(e.target.value),\n              className: \"message-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              className: \"send-btn\",\n              children: \"Send \\uD83D\\uDE80\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"empty-state-icon\",\n            children: \"\\uD83D\\uDC46\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select a group to start chatting!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notifications-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"notifications-title\",\n            children: \"\\uD83D\\uDD14 Notifications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this), notifications.length > 0 ? /*#__PURE__*/_jsxDEV(ListGroup, {\n            children: notifications.map((note, i) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: \"notification-item\",\n              children: note\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"empty-state\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No notifications\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n}\n_s(GroupChatApp, \"o61TP5NvCwtZv2AVYyGsczYbPYg=\");\n_c = GroupChatApp;\nexport default GroupChatApp;\nvar _c;\n$RefreshReg$(_c, \"GroupChatApp\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Button","Form","Dropdown","ListGroup","Container","Row","Col","axios","NavBar","LoggedUserContext","jsxDEV","_jsxDEV","GroupChatApp","_s","groups","setGroups","selectedGroup","setSelectedGroup","messages","setMessages","inputValueSend","setInputValueSend","inputValueGroup","setInputValueGroup","notifications","setNotifications","loggedUser","fetchGroups","response","get","data","err","console","error","group","find","g","name","fetchMessages","res","id","interval","setInterval","clearInterval","handleSend","trim","messagePayload","sender","firstName","lastName","message","log","post","handleCreateGroup","e","preventDefault","setInputValue","prev","inputValue","getMessageText","msg","content","text","formatTimestamp","timestamp","date","Date","now","isToday","toDateString","toLocaleTimeString","hour","minute","toLocaleString","month","day","className","children","fileName","_jsxFileName","lineNumber","columnNumber","md","onSelect","Toggle","Menu","map","i","Item","eventKey","onSubmit","Control","type","placeholder","value","onChange","target","length","idx","note","_c","$RefreshReg$"],"sources":["E:/AN3/SEM2/project-MichiMauser/frontend/src/pages/webSocket/WebSocketMsg.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { Button, Form, Dropdown, ListGroup, Container, Row, Col } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport NavBar from \"../../components/Navbar\";\r\nimport { LoggedUserContext } from '../../context/LoggedUserContext';\r\nimport \"../../styles/ChatGroup.css\";\r\nfunction GroupChatApp() {\r\n    const [groups, setGroups] = useState([]);\r\n    const [selectedGroup, setSelectedGroup] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [inputValueSend, setInputValueSend] = useState('');\r\n    const [inputValueGroup, setInputValueGroup] = useState('');\r\n    const [notifications, setNotifications] = useState([]);\r\n    const {loggedUser} = useContext(LoggedUserContext);\r\n\r\n    // Fetch groups function\r\n    const fetchGroups = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:8080/group');\r\n            setGroups(response.data);\r\n        } catch (err) {\r\n            console.error('GET /group failed:', err);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchGroups();\r\n    }, []);\r\n\r\n    // Poll messages every 2 seconds\r\n    useEffect(() => {\r\n        if (!selectedGroup) return;\r\n\r\n        const group = groups.find(g => g.name === selectedGroup);\r\n        if (!group) return;\r\n\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const res = await axios.get(`http://localhost:8080/message/${group.id}`);\r\n                setMessages(res.data);\r\n            } catch (err) {\r\n                console.error('Polling error:', err);\r\n            }\r\n        };\r\n\r\n        fetchMessages(); // Initial fetch\r\n\r\n        const interval = setInterval(fetchMessages, 2000); // Changed to 2 seconds for better performance\r\n\r\n        return () => clearInterval(interval); // Cleanup\r\n    }, [selectedGroup, groups]);\r\n\r\n    const handleSend = async () => {\r\n        if (!inputValueSend.trim() || !selectedGroup) return;\r\n\r\n        const group = groups.find(g => g.name === selectedGroup);\r\n        if (!group) {\r\n            console.error(\"Selected group not found\");\r\n            return;\r\n        }\r\n\r\n        // Adjust payload property name to match backend 'content' or 'text'\r\n        const messagePayload = {\r\n            sender: `${loggedUser.firstName+\" \"+loggedUser.lastName}`,\r\n            message: inputValueSend\r\n        };\r\n\r\n        try {\r\n            console.log(`${loggedUser.firstName}`)\r\n            await axios.post(`http://localhost:8080/message/post?groupChatId=${group.id}`, messagePayload);\r\n\r\n            const response = await axios.get(`http://localhost:8080/message/${group.id}`);\r\n            setMessages(response.data);\r\n            setInputValueSend('');\r\n        } catch (err) {\r\n            console.error('Sending message failed:', err);\r\n        }\r\n    };\r\n\r\n    const handleCreateGroup = async (e) => {\r\n        e.preventDefault();\r\n        if (!inputValueGroup.trim()) return;\r\n\r\n        try {\r\n            // Create the group and get the response with the actual group data\r\n            const response = await axios.post('http://localhost:8080/group/create', { name: inputValueGroup });\r\n            \r\n            // Refresh the groups list to get the latest data with correct IDs\r\n            await fetchGroups();\r\n            \r\n            // Set the selected group to the newly created one\r\n            setSelectedGroup(inputValueGroup);\r\n            setInputValue('');\r\n            \r\n            // Add success notification\r\n            setNotifications(prev => [...prev, `Group \"${inputValue}\" created successfully!`]);\r\n        } catch (err) {\r\n            console.error('Create group error:', err);\r\n            setNotifications(prev => [...prev, `Failed to create group: ${err.message}`]);\r\n        }\r\n    };\r\n\r\n    // Helper function to display message text reliably\r\n    const getMessageText = (msg) => {\r\n        return msg.content || msg.text || msg.message || '[No message]';\r\n    };\r\n\r\n    // Helper function to format timestamp\r\n    const formatTimestamp = (timestamp) => {\r\n        if (!timestamp) return '';\r\n        \r\n        const date = new Date(timestamp);\r\n        const now = new Date();\r\n        const isToday = date.toDateString() === now.toDateString();\r\n        \r\n        if (isToday) {\r\n            // Show only time if message is from today\r\n            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n        } else {\r\n            // Show date and time if message is from another day\r\n            return date.toLocaleString([], { \r\n                month: 'short', \r\n                day: 'numeric', \r\n                hour: '2-digit', \r\n                minute: '2-digit' \r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"group-chat-container\">\r\n            <NavBar />\r\n            <Container>\r\n                <div className=\"chat-main-card\">\r\n                    <h3 className=\"chat-header\">💬 Group Chat</h3>\r\n\r\n                    <div className=\"group-controls\">\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <div className=\"group-dropdown\">\r\n                                    <Dropdown onSelect={setSelectedGroup}>\r\n                                        <Dropdown.Toggle className=\"w-100\">\r\n                                            {selectedGroup || 'Select Group'}\r\n                                        </Dropdown.Toggle>\r\n                                        <Dropdown.Menu>\r\n                                            {groups.map((g, i) => (\r\n                                                <Dropdown.Item key={i} eventKey={g.name}>{g.name}</Dropdown.Item>\r\n                                            ))}\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                </div>\r\n                            </Col>\r\n\r\n                            <Col md={6}>\r\n                                <Form onSubmit={handleCreateGroup} className=\"create-group-form\">\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        placeholder=\"Create new group...\"\r\n                                        value={inputValue}\r\n                                        onChange={e => setInputValue(e.target.value)}\r\n                                        className=\"create-group-input\"\r\n                                    />\r\n                                    <Button type=\"submit\" className=\"create-group-btn\">\r\n                                        ✨ Create Group\r\n                                    </Button>\r\n                                </Form>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n\r\n                    {selectedGroup ? (\r\n                        <div className=\"chat-section\">\r\n                            <h5 className=\"chat-title\">📨 Messages in {selectedGroup}</h5>\r\n                            <ListGroup className=\"messages-container\">\r\n                                {messages.length > 0 ? messages.map((msg, idx) => (\r\n                                    <ListGroup.Item key={idx} className=\"message-item\">\r\n                                        <div className=\"message-content\">\r\n                                            <div className=\"message-text\">\r\n                                                <span className=\"message-sender\">{msg.sender || 'Unknown'}</span>\r\n                                                {getMessageText(msg)}\r\n                                            </div>\r\n                                            <span className=\"message-timestamp\">\r\n                                                {formatTimestamp(msg.timestamp)}\r\n                                            </span>\r\n                                        </div>\r\n                                    </ListGroup.Item>\r\n                                )) : (\r\n                                    <div className=\"empty-state\">\r\n                                        <div className=\"empty-state-icon\">💭</div>\r\n                                        <p>No messages yet. Start the conversation!</p>\r\n                                    </div>\r\n                                )}\r\n                            </ListGroup>\r\n\r\n                            <Form className=\"message-input-form\" onSubmit={e => { e.preventDefault(); handleSend(); }}>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Type your message...\"\r\n                                    value={inputValue}\r\n                                    onChange={e => setInputValue(e.target.value)}\r\n                                    className=\"message-input\"\r\n                                />\r\n                                <Button type=\"submit\" className=\"send-btn\">\r\n                                    Send 🚀\r\n                                </Button>\r\n                            </Form>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"empty-state\">\r\n                            <div className=\"empty-state-icon\">👆</div>\r\n                            <p>Select a group to start chatting!</p>\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className=\"notifications-section\">\r\n                        <h5 className=\"notifications-title\">\r\n                            🔔 Notifications\r\n                        </h5>\r\n                        {notifications.length > 0 ? (\r\n                            <ListGroup>\r\n                                {notifications.map((note, i) => (\r\n                                    <ListGroup.Item key={i} className=\"notification-item\">\r\n                                        {note}\r\n                                    </ListGroup.Item>\r\n                                ))}\r\n                            </ListGroup>\r\n                        ) : (\r\n                            <div className=\"empty-state\">\r\n                                <p>No notifications</p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GroupChatApp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}