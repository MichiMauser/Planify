{"ast":null,"code":"var _jsxFileName = \"E:\\\\AN3\\\\SEM2\\\\project-MichiMauser\\\\frontend\\\\src\\\\pages\\\\webSocket\\\\WebSocketMsg.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState, useRef, useCallback } from 'react';\nimport { Button, Form, Dropdown, ListGroup, Container, Row, Col, Alert } from 'react-bootstrap';\nimport axios from 'axios';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport NavBar from \"../../components/Navbar\";\nimport { LoggedUserContext } from '../../context/LoggedUserContext';\nimport \"../../styles/ChatGroup.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GroupChatApp() {\n  _s();\n  const [groups, setGroups] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [inputValueSend, setInputValueSend] = useState('');\n  const [inputValueGroup, setInputValueGroup] = useState('');\n  const [notifications, setNotifications] = useState([]);\n  const [unreadNotifications, setUnreadNotifications] = useState(0);\n  const {\n    loggedUser\n  } = useContext(LoggedUserContext);\n  const stompClient = useRef(null);\n  const [isConnected, setIsConnected] = useState(false);\n  // Removed currentGroupSubscription.useRef(null) as it's not needed for polling chat messages\n\n  // --- Helper Functions ---\n\n  // Fetch groups function\n  const fetchGroups = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/group');\n      setGroups(response.data);\n    } catch (err) {\n      console.error('GET /group failed:', err);\n    }\n  };\n\n  // Remove notification (using useCallback for optimization)\n  const removeNotification = useCallback(notificationId => {\n    setNotifications(prev => {\n      const notification = prev.find(n => n.id === notificationId);\n      if (notification && !notification.read) {\n        setUnreadNotifications(count => Math.max(0, count - 1));\n      }\n      return prev.filter(n => n.id !== notificationId);\n    });\n  }, []);\n\n  // Mark notification as read (using useCallback for optimization)\n  const markNotificationAsRead = useCallback(notificationId => {\n    setNotifications(prev => prev.map(n => {\n      if (n.id === notificationId && !n.read) {\n        setUnreadNotifications(count => Math.max(0, count - 1));\n        return {\n          ...n,\n          read: true\n        };\n      }\n      return n;\n    }));\n  }, []);\n\n  // Switch to group from notification (using useCallback for optimization)\n  const switchToGroupFromNotification = useCallback((groupName, notificationId) => {\n    setSelectedGroup(groupName);\n    markNotificationAsRead(notificationId);\n  }, [markNotificationAsRead]);\n\n  // Helper function to display message text reliably\n  const getMessageText = useCallback(msg => {\n    return msg.content || msg.text || msg.message || '[No message]';\n  }, []);\n\n  // Helper function to format timestamp\n  const formatTimestamp = useCallback(timestamp => {\n    if (!timestamp) return '';\n    const date = new Date(timestamp);\n    const now = new Date();\n    const isToday = date.toDateString() === now.toDateString();\n    if (isToday) {\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    } else {\n      return date.toLocaleString([], {\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  }, []);\n\n  // Request Notification Permission (for desktop notifications)\n  const requestDesktopNotificationPermission = () => {\n    if (!(\"Notification\" in window)) {\n      console.warn(\"This browser does not support desktop notification\");\n    } else if (Notification.permission !== 'granted' && Notification.permission !== 'denied') {\n      Notification.requestPermission().then(permission => {\n        if (permission === \"granted\") {\n          console.log(\"Desktop notification permission granted.\");\n        } else {\n          console.warn(\"Desktop notification permission denied.\");\n        }\n      });\n    }\n  };\n\n  // --- WebSocket Connection Setup (Runs once on mount, ONLY for notifications) ---\n  useEffect(() => {\n    const socket = new SockJS('http://localhost:8080/socket');\n    stompClient.current = Stomp.over(socket);\n    stompClient.current.connect({}, frame => {\n      console.log('Connected to WebSocket:', frame);\n      setIsConnected(true);\n\n      // Subscribe to GLOBAL notifications topic\n      stompClient.current.subscribe('/topic/notifications', message => {\n        const notification = JSON.parse(message.body);\n        handleWebSocketNotification(notification);\n      });\n    }, error => {\n      console.error('WebSocket connection error:', error);\n      setIsConnected(false);\n    });\n\n    // Cleanup: Disconnect WebSocket when component unmounts\n    return () => {\n      if (stompClient.current && stompClient.current.connected) {\n        stompClient.current.disconnect(() => {\n          console.log(\"WebSocket disconnected.\");\n        });\n      }\n    };\n  }, []); // Empty dependency array means this effect runs only once on mount\n\n  // --- Handle Incoming WebSocket Notifications (Callback for reusability) ---\n  const handleWebSocketNotification = useCallback(notification => {\n    if (notification.type === 'NEW_MESSAGE') {\n      const currentUserFullName = loggedUser ? `${loggedUser.firstName} ${loggedUser.lastName}` : null;\n\n      // Don't show notification for your own messages\n      if (currentUserFullName && notification.sender === currentUserFullName) {\n        return;\n      }\n\n      // Get the ID of the currently selected group\n      const currentSelectedGroupObject = groups.find(g => g.name === selectedGroup);\n      const currentSelectedGroupId = currentSelectedGroupObject ? currentSelectedGroupObject.id : null;\n\n      // If user is NOT viewing this group, process as a notification\n      if (!currentSelectedGroupId || currentSelectedGroupId !== notification.groupId) {\n        const newNotification = {\n          id: Date.now(),\n          // Unique ID for React key and dismissal\n          type: 'message',\n          groupName: notification.groupName,\n          groupId: notification.groupId,\n          sender: notification.sender,\n          message: notification.message,\n          timestamp: new Date(notification.timestamp),\n          read: false\n        };\n        setNotifications(prev => [newNotification, ...prev].slice(0, 10)); // Keep only 10 latest\n        setUnreadNotifications(prev => prev + 1);\n\n        // Auto-remove app-level notification after 10 seconds\n        setTimeout(() => {\n          removeNotification(newNotification.id);\n        }, 10000);\n\n        // --- Trigger Desktop Notification (Optional) ---\n        if (\"Notification\" in window && Notification.permission === \"granted\") {\n          const title = `New Message in ${notification.groupName} from ${notification.sender}`;\n          const options = {\n            body: notification.message,\n            icon: '/path/to/your/chat-icon.png',\n            // Path to a small icon for the notification\n            tag: `group-chat-${notification.groupId}` // Groups notifications for the same chat\n          };\n          const desktopNotif = new Notification(title, options);\n          desktopNotif.onclick = function () {\n            window.focus(); // Bring the browser tab to focus\n            if (newNotification.groupName) {\n              setSelectedGroup(newNotification.groupName);\n            }\n            markNotificationAsRead(newNotification.id);\n            desktopNotif.close();\n          };\n        }\n      }\n    }\n  }, [loggedUser, selectedGroup, groups, removeNotification, markNotificationAsRead]);\n\n  // --- Fetch Groups on Component Mount ---\n  useEffect(() => {\n    fetchGroups();\n  }, []);\n\n  // --- Polling for Messages (Original functionality restored) ---\n  useEffect(() => {\n    if (!selectedGroup) {\n      setMessages([]); // Clear messages if no group is selected\n      return;\n    }\n    const group = groups.find(g => g.name === selectedGroup);\n    if (!group) {\n      console.warn(`Selected group \"${selectedGroup}\" not found for polling.`);\n      setMessages([]);\n      return;\n    }\n    const fetchMessages = async () => {\n      try {\n        const res = await axios.get(`http://localhost:8080/message/${group.id}`);\n        setMessages(res.data);\n      } catch (err) {\n        console.error('Polling for messages failed:', err);\n      }\n    };\n    fetchMessages(); // Initial fetch when group selected\n\n    const interval = setInterval(fetchMessages, 2000); // Poll every 2 seconds\n\n    return () => clearInterval(interval); // Cleanup interval on unmount or selectedGroup change\n  }, [selectedGroup, groups]); // Dependencies: re-run when selectedGroup or groups changes\n\n  // --- Handlers for User Actions ---\n\n  const handleSend = async () => {\n    if (!inputValueSend.trim() || !selectedGroup) return; // Only need selectedGroup for polling approach\n\n    const group = groups.find(g => g.name === selectedGroup);\n    if (!group) {\n      console.error(\"Selected group not found\");\n      return;\n    }\n    const messagePayload = {\n      sender: `${loggedUser.firstName} ${loggedUser.lastName}`,\n      message: inputValueSend\n    };\n    try {\n      await axios.post(`http://localhost:8080/message/post?groupChatId=${group.id}`, messagePayload);\n\n      // After sending, immediately poll to update messages (mimicking real-time perception for the sender)\n      // This is crucial if WebSockets are NOT used for direct message updates.\n      const response = await axios.get(`http://localhost:8080/message/${group.id}`);\n      setMessages(response.data);\n      setInputValueSend(''); // Clear input\n    } catch (err) {\n      console.error('Sending message failed:', err);\n    }\n  };\n  const handleCreateGroup = async e => {\n    e.preventDefault();\n    if (!inputValueGroup.trim()) return;\n    try {\n      await axios.post('http://localhost:8080/group/create', {\n        name: inputValueGroup\n      });\n      await fetchGroups(); // Re-fetch groups to update the dropdown\n      setSelectedGroup(inputValueGroup); // Automatically select the newly created group\n      setInputValueGroup('');\n    } catch (err) {\n      console.error('Create group error:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"group-chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-main-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-between align-items-center mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"chat-header\",\n            children: \"\\uD83D\\uDCAC Group Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connection-status\",\n            children: [isConnected ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-success\",\n              children: \"\\uD83D\\uDFE2 Connected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-danger\",\n              children: \"\\uD83D\\uDD34 Disconnected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline-primary\",\n              size: \"sm\",\n              className: \"ms-3\",\n              onClick: requestDesktopNotificationPermission,\n              title: \"Enable browser pop-up notifications\",\n              children: \"Get Desktop Notifications \\uD83D\\uDD14\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 21\n        }, this), notifications.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notifications-bar mb-3 p-3 border rounded shadow-sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-between align-items-center mb-2\",\n            children: /*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"mb-0\",\n              children: [\"\\uD83D\\uDD14 Live Notifications\", unreadNotifications > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"badge bg-danger ms-2\",\n                children: unreadNotifications\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"notifications-list\",\n            children: [notifications.slice(0, 3).map(notification => /*#__PURE__*/_jsxDEV(Alert, {\n              variant: notification.read ? \"secondary\" : \"info\",\n              className: \"notification-alert mb-2\",\n              dismissible: true,\n              onClose: () => removeNotification(notification.id),\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-flex justify-content-between align-items-start\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"notification-content flex-grow-1\",\n                  style: {\n                    cursor: 'pointer'\n                  },\n                  onClick: () => switchToGroupFromNotification(notification.groupName, notification.id),\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: notification.sender\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 326,\n                    columnNumber: 49\n                  }, this), \" in \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: notification.groupName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 326,\n                    columnNumber: 91\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 327,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                    children: notification.message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 328,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  className: \"text-muted ms-2\",\n                  children: formatTimestamp(notification.timestamp)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 330,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 41\n              }, this)\n            }, notification.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 37\n            }, this)), notifications.length > 3 && /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"text-muted\",\n              children: [\"+\", notifications.length - 3, \" more notifications...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-controls mb-4\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              className: \"mb-3 mb-md-0\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"group-dropdown\",\n                children: /*#__PURE__*/_jsxDEV(Dropdown, {\n                  onSelect: setSelectedGroup,\n                  children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n                    className: \"w-100\",\n                    children: selectedGroup || 'Select Group'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 350,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n                    children: groups.map((g, i) => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                      eventKey: g.name,\n                      children: g.name\n                    }, i, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 355,\n                      columnNumber: 49\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 353,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(Form, {\n                onSubmit: handleCreateGroup,\n                className: \"create-group-form d-flex\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  placeholder: \"Create new group...\",\n                  value: inputValueGroup,\n                  onChange: e => setInputValueGroup(e.target.value),\n                  className: \"create-group-input me-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 364,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  className: \"create-group-btn\",\n                  children: \"\\u2728 Create Group\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 21\n        }, this), selectedGroup ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-section card p-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"chat-title mb-3\",\n            children: [\"\\uD83D\\uDCE8 Messages in \", selectedGroup]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n            className: \"messages-container flex-grow-1 mb-3\",\n            children: messages.length > 0 ? messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: `message-item ${msg.sender === `${loggedUser.firstName} ${loggedUser.lastName}` ? 'my-message' : 'other-message'}`,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-content\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-text\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"message-sender\",\n                    children: msg.sender === `${loggedUser.firstName} ${loggedUser.lastName}` ? 'You' : msg.sender || 'Unknown'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 390,\n                    columnNumber: 49\n                  }, this), getMessageText(msg)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 389,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"message-timestamp\",\n                  children: formatTimestamp(msg.timestamp)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 41\n              }, this)\n            }, msg.id || idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 37\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"empty-state\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"empty-state-icon\",\n                children: \"\\uD83D\\uDCAD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No messages yet. Start the conversation!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            className: \"message-input-form d-flex\",\n            onSubmit: e => {\n              e.preventDefault();\n              handleSend();\n            },\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Type your message...\",\n              value: inputValueSend,\n              onChange: e => setInputValue(e.target.value),\n              className: \"message-input me-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              className: \"send-btn\",\n              children: \"Send \\uD83D\\uDE80\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state card p-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"empty-state-icon\",\n            children: \"\\uD83D\\uDC46\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select a group to start chatting!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 9\n  }, this);\n}\n_s(GroupChatApp, \"Lom3rFIksLEsM817ZoAEdHgh/7o=\");\n_c = GroupChatApp;\nexport default GroupChatApp;\nvar _c;\n$RefreshReg$(_c, \"GroupChatApp\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useRef","useCallback","Button","Form","Dropdown","ListGroup","Container","Row","Col","Alert","axios","SockJS","Stomp","NavBar","LoggedUserContext","jsxDEV","_jsxDEV","GroupChatApp","_s","groups","setGroups","selectedGroup","setSelectedGroup","messages","setMessages","inputValueSend","setInputValueSend","inputValueGroup","setInputValueGroup","notifications","setNotifications","unreadNotifications","setUnreadNotifications","loggedUser","stompClient","isConnected","setIsConnected","fetchGroups","response","get","data","err","console","error","removeNotification","notificationId","prev","notification","find","n","id","read","count","Math","max","filter","markNotificationAsRead","map","switchToGroupFromNotification","groupName","getMessageText","msg","content","text","message","formatTimestamp","timestamp","date","Date","now","isToday","toDateString","toLocaleTimeString","hour","minute","toLocaleString","month","day","requestDesktopNotificationPermission","window","warn","Notification","permission","requestPermission","then","log","socket","current","over","connect","frame","subscribe","JSON","parse","body","handleWebSocketNotification","connected","disconnect","type","currentUserFullName","firstName","lastName","sender","currentSelectedGroupObject","g","name","currentSelectedGroupId","groupId","newNotification","slice","setTimeout","title","options","icon","tag","desktopNotif","onclick","focus","close","group","fetchMessages","res","interval","setInterval","clearInterval","handleSend","trim","messagePayload","post","handleCreateGroup","e","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","length","dismissible","onClose","style","cursor","md","onSelect","Toggle","Menu","i","Item","eventKey","onSubmit","Control","placeholder","value","onChange","target","idx","setInputValue","_c","$RefreshReg$"],"sources":["E:/AN3/SEM2/project-MichiMauser/frontend/src/pages/webSocket/WebSocketMsg.js"],"sourcesContent":["import React, { useContext, useEffect, useState, useRef, useCallback } from 'react';\r\nimport { Button, Form, Dropdown, ListGroup, Container, Row, Col, Alert } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport NavBar from \"../../components/Navbar\";\r\nimport { LoggedUserContext } from '../../context/LoggedUserContext';\r\nimport \"../../styles/ChatGroup.css\";\r\n\r\nfunction GroupChatApp() {\r\n    const [groups, setGroups] = useState([]);\r\n    const [selectedGroup, setSelectedGroup] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [inputValueSend, setInputValueSend] = useState('');\r\n    const [inputValueGroup, setInputValueGroup] = useState('');\r\n    const [notifications, setNotifications] = useState([]);\r\n    const [unreadNotifications, setUnreadNotifications] = useState(0);\r\n    const { loggedUser } = useContext(LoggedUserContext);\r\n    const stompClient = useRef(null);\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    // Removed currentGroupSubscription.useRef(null) as it's not needed for polling chat messages\r\n\r\n    // --- Helper Functions ---\r\n\r\n    // Fetch groups function\r\n    const fetchGroups = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:8080/group');\r\n            setGroups(response.data);\r\n        } catch (err) {\r\n            console.error('GET /group failed:', err);\r\n        }\r\n    };\r\n\r\n    // Remove notification (using useCallback for optimization)\r\n    const removeNotification = useCallback((notificationId) => {\r\n        setNotifications(prev => {\r\n            const notification = prev.find(n => n.id === notificationId);\r\n            if (notification && !notification.read) {\r\n                setUnreadNotifications(count => Math.max(0, count - 1));\r\n            }\r\n            return prev.filter(n => n.id !== notificationId);\r\n        });\r\n    }, []);\r\n\r\n    // Mark notification as read (using useCallback for optimization)\r\n    const markNotificationAsRead = useCallback((notificationId) => {\r\n        setNotifications(prev => prev.map(n => {\r\n            if (n.id === notificationId && !n.read) {\r\n                setUnreadNotifications(count => Math.max(0, count - 1));\r\n                return { ...n, read: true };\r\n            }\r\n            return n;\r\n        }));\r\n    }, []);\r\n\r\n    // Switch to group from notification (using useCallback for optimization)\r\n    const switchToGroupFromNotification = useCallback((groupName, notificationId) => {\r\n        setSelectedGroup(groupName);\r\n        markNotificationAsRead(notificationId);\r\n    }, [markNotificationAsRead]);\r\n\r\n    // Helper function to display message text reliably\r\n    const getMessageText = useCallback((msg) => {\r\n        return msg.content || msg.text || msg.message || '[No message]';\r\n    }, []);\r\n\r\n    // Helper function to format timestamp\r\n    const formatTimestamp = useCallback((timestamp) => {\r\n        if (!timestamp) return '';\r\n\r\n        const date = new Date(timestamp);\r\n        const now = new Date();\r\n        const isToday = date.toDateString() === now.toDateString();\r\n\r\n        if (isToday) {\r\n            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n        } else {\r\n            return date.toLocaleString([], {\r\n                month: 'short',\r\n                day: 'numeric',\r\n                hour: '2-digit',\r\n                minute: '2-digit'\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    // Request Notification Permission (for desktop notifications)\r\n    const requestDesktopNotificationPermission = () => {\r\n        if (!(\"Notification\" in window)) {\r\n            console.warn(\"This browser does not support desktop notification\");\r\n        } else if (Notification.permission !== 'granted' && Notification.permission !== 'denied') {\r\n            Notification.requestPermission().then(permission => {\r\n                if (permission === \"granted\") {\r\n                    console.log(\"Desktop notification permission granted.\");\r\n                } else {\r\n                    console.warn(\"Desktop notification permission denied.\");\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    // --- WebSocket Connection Setup (Runs once on mount, ONLY for notifications) ---\r\n    useEffect(() => {\r\n        const socket = new SockJS('http://localhost:8080/socket');\r\n        stompClient.current = Stomp.over(socket);\r\n\r\n        stompClient.current.connect({}, (frame) => {\r\n            console.log('Connected to WebSocket:', frame);\r\n            setIsConnected(true);\r\n\r\n            // Subscribe to GLOBAL notifications topic\r\n            stompClient.current.subscribe('/topic/notifications', (message) => {\r\n                const notification = JSON.parse(message.body);\r\n                handleWebSocketNotification(notification);\r\n            });\r\n        }, (error) => {\r\n            console.error('WebSocket connection error:', error);\r\n            setIsConnected(false);\r\n        });\r\n\r\n        // Cleanup: Disconnect WebSocket when component unmounts\r\n        return () => {\r\n            if (stompClient.current && stompClient.current.connected) {\r\n                stompClient.current.disconnect(() => {\r\n                    console.log(\"WebSocket disconnected.\");\r\n                });\r\n            }\r\n        };\r\n    }, []); // Empty dependency array means this effect runs only once on mount\r\n\r\n\r\n    // --- Handle Incoming WebSocket Notifications (Callback for reusability) ---\r\n    const handleWebSocketNotification = useCallback((notification) => {\r\n        if (notification.type === 'NEW_MESSAGE') {\r\n            const currentUserFullName = loggedUser ? `${loggedUser.firstName} ${loggedUser.lastName}` : null;\r\n\r\n            // Don't show notification for your own messages\r\n            if (currentUserFullName && notification.sender === currentUserFullName) {\r\n                return;\r\n            }\r\n\r\n            // Get the ID of the currently selected group\r\n            const currentSelectedGroupObject = groups.find(g => g.name === selectedGroup);\r\n            const currentSelectedGroupId = currentSelectedGroupObject ? currentSelectedGroupObject.id : null;\r\n\r\n            // If user is NOT viewing this group, process as a notification\r\n            if (!currentSelectedGroupId || currentSelectedGroupId !== notification.groupId) {\r\n                const newNotification = {\r\n                    id: Date.now(), // Unique ID for React key and dismissal\r\n                    type: 'message',\r\n                    groupName: notification.groupName,\r\n                    groupId: notification.groupId,\r\n                    sender: notification.sender,\r\n                    message: notification.message,\r\n                    timestamp: new Date(notification.timestamp),\r\n                    read: false\r\n                };\r\n\r\n                setNotifications(prev => [newNotification, ...prev].slice(0, 10)); // Keep only 10 latest\r\n                setUnreadNotifications(prev => prev + 1);\r\n\r\n                // Auto-remove app-level notification after 10 seconds\r\n                setTimeout(() => {\r\n                    removeNotification(newNotification.id);\r\n                }, 10000);\r\n\r\n                // --- Trigger Desktop Notification (Optional) ---\r\n                if (\"Notification\" in window && Notification.permission === \"granted\") {\r\n                    const title = `New Message in ${notification.groupName} from ${notification.sender}`;\r\n                    const options = {\r\n                        body: notification.message,\r\n                        icon: '/path/to/your/chat-icon.png', // Path to a small icon for the notification\r\n                        tag: `group-chat-${notification.groupId}`, // Groups notifications for the same chat\r\n                    };\r\n                    const desktopNotif = new Notification(title, options);\r\n\r\n                    desktopNotif.onclick = function() {\r\n                        window.focus(); // Bring the browser tab to focus\r\n                        if (newNotification.groupName) {\r\n                            setSelectedGroup(newNotification.groupName);\r\n                        }\r\n                        markNotificationAsRead(newNotification.id);\r\n                        desktopNotif.close();\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }, [loggedUser, selectedGroup, groups, removeNotification, markNotificationAsRead]);\r\n\r\n\r\n    // --- Fetch Groups on Component Mount ---\r\n    useEffect(() => {\r\n        fetchGroups();\r\n    }, []);\r\n\r\n\r\n    // --- Polling for Messages (Original functionality restored) ---\r\n    useEffect(() => {\r\n        if (!selectedGroup) {\r\n            setMessages([]); // Clear messages if no group is selected\r\n            return;\r\n        }\r\n\r\n        const group = groups.find(g => g.name === selectedGroup);\r\n        if (!group) {\r\n            console.warn(`Selected group \"${selectedGroup}\" not found for polling.`);\r\n            setMessages([]);\r\n            return;\r\n        }\r\n\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const res = await axios.get(`http://localhost:8080/message/${group.id}`);\r\n                setMessages(res.data);\r\n            } catch (err) {\r\n                console.error('Polling for messages failed:', err);\r\n            }\r\n        };\r\n\r\n        fetchMessages(); // Initial fetch when group selected\r\n\r\n        const interval = setInterval(fetchMessages, 2000); // Poll every 2 seconds\r\n\r\n        return () => clearInterval(interval); // Cleanup interval on unmount or selectedGroup change\r\n    }, [selectedGroup, groups]); // Dependencies: re-run when selectedGroup or groups changes\r\n\r\n\r\n    // --- Handlers for User Actions ---\r\n\r\n    const handleSend = async () => {\r\n        if (!inputValueSend.trim() || !selectedGroup) return; // Only need selectedGroup for polling approach\r\n\r\n        const group = groups.find(g => g.name === selectedGroup);\r\n        if (!group) {\r\n            console.error(\"Selected group not found\");\r\n            return;\r\n        }\r\n\r\n        const messagePayload = {\r\n            sender: `${loggedUser.firstName} ${loggedUser.lastName}`,\r\n            message: inputValueSend,\r\n        };\r\n\r\n        try {\r\n            await axios.post(`http://localhost:8080/message/post?groupChatId=${group.id}`, messagePayload);\r\n\r\n            // After sending, immediately poll to update messages (mimicking real-time perception for the sender)\r\n            // This is crucial if WebSockets are NOT used for direct message updates.\r\n            const response = await axios.get(`http://localhost:8080/message/${group.id}`);\r\n            setMessages(response.data);\r\n            setInputValueSend(''); // Clear input\r\n        } catch (err) {\r\n            console.error('Sending message failed:', err);\r\n        }\r\n    };\r\n\r\n    const handleCreateGroup = async (e) => {\r\n        e.preventDefault();\r\n        if (!inputValueGroup.trim()) return;\r\n\r\n        try {\r\n            await axios.post('http://localhost:8080/group/create', { name: inputValueGroup });\r\n\r\n            await fetchGroups(); // Re-fetch groups to update the dropdown\r\n            setSelectedGroup(inputValueGroup); // Automatically select the newly created group\r\n            setInputValueGroup('');\r\n        } catch (err) {\r\n            console.error('Create group error:', err);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"group-chat-container\">\r\n            <NavBar />\r\n            <Container>\r\n                <div className=\"chat-main-card\">\r\n                    <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                        <h3 className=\"chat-header\">💬 Group Chat</h3>\r\n                        <div className=\"connection-status\">\r\n                            {isConnected ? (\r\n                                <span className=\"text-success\">🟢 Connected</span>\r\n                            ) : (\r\n                                <span className=\"text-danger\">🔴 Disconnected</span>\r\n                            )}\r\n                            <Button\r\n                                variant=\"outline-primary\"\r\n                                size=\"sm\"\r\n                                className=\"ms-3\"\r\n                                onClick={requestDesktopNotificationPermission}\r\n                                title=\"Enable browser pop-up notifications\"\r\n                            >\r\n                                Get Desktop Notifications 🔔\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Real-time Notifications Bar */}\r\n                    {notifications.length > 0 && (\r\n                        <div className=\"notifications-bar mb-3 p-3 border rounded shadow-sm\">\r\n                            <div className=\"d-flex justify-content-between align-items-center mb-2\">\r\n                                <h6 className=\"mb-0\">\r\n                                    🔔 Live Notifications\r\n                                    {unreadNotifications > 0 && (\r\n                                        <span className=\"badge bg-danger ms-2\">{unreadNotifications}</span>\r\n                                    )}\r\n                                </h6>\r\n                            </div>\r\n                            <div className=\"notifications-list\">\r\n                                {notifications.slice(0, 3).map((notification) => (\r\n                                    <Alert\r\n                                        key={notification.id}\r\n                                        variant={notification.read ? \"secondary\" : \"info\"}\r\n                                        className=\"notification-alert mb-2\"\r\n                                        dismissible\r\n                                        onClose={() => removeNotification(notification.id)}\r\n                                    >\r\n                                        <div className=\"d-flex justify-content-between align-items-start\">\r\n                                            <div\r\n                                                className=\"notification-content flex-grow-1\"\r\n                                                style={{ cursor: 'pointer' }}\r\n                                                onClick={() => switchToGroupFromNotification(notification.groupName, notification.id)}\r\n                                            >\r\n                                                <strong>{notification.sender}</strong> in <strong>{notification.groupName}</strong>\r\n                                                <br />\r\n                                                <small>{notification.message}</small>\r\n                                            </div>\r\n                                            <small className=\"text-muted ms-2\">\r\n                                                {formatTimestamp(notification.timestamp)}\r\n                                            </small>\r\n                                        </div>\r\n                                    </Alert>\r\n                                ))}\r\n                                {notifications.length > 3 && (\r\n                                    <small className=\"text-muted\">\r\n                                        +{notifications.length - 3} more notifications...\r\n                                    </small>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className=\"group-controls mb-4\">\r\n                        <Row>\r\n                            <Col md={6} className=\"mb-3 mb-md-0\">\r\n                                <div className=\"group-dropdown\">\r\n                                    <Dropdown onSelect={setSelectedGroup}>\r\n                                        <Dropdown.Toggle className=\"w-100\">\r\n                                            {selectedGroup || 'Select Group'}\r\n                                        </Dropdown.Toggle>\r\n                                        <Dropdown.Menu>\r\n                                            {groups.map((g, i) => (\r\n                                                <Dropdown.Item key={i} eventKey={g.name}>{g.name}</Dropdown.Item>\r\n                                            ))}\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                </div>\r\n                            </Col>\r\n\r\n                            <Col md={6}>\r\n                                <Form onSubmit={handleCreateGroup} className=\"create-group-form d-flex\">\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        placeholder=\"Create new group...\"\r\n                                        value={inputValueGroup}\r\n                                        onChange={e => setInputValueGroup(e.target.value)}\r\n                                        className=\"create-group-input me-2\"\r\n                                    />\r\n                                    <Button type=\"submit\" className=\"create-group-btn\">\r\n                                        ✨ Create Group\r\n                                    </Button>\r\n                                </Form>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n\r\n                    {selectedGroup ? (\r\n                        <div className=\"chat-section card p-3\">\r\n                            <h5 className=\"chat-title mb-3\">📨 Messages in {selectedGroup}</h5>\r\n                            <ListGroup className=\"messages-container flex-grow-1 mb-3\">\r\n                                {messages.length > 0 ? messages.map((msg, idx) => (\r\n                                    <ListGroup.Item\r\n                                        key={msg.id || idx}\r\n                                        className={`message-item ${msg.sender === `${loggedUser.firstName} ${loggedUser.lastName}` ? 'my-message' : 'other-message'}`}\r\n                                    >\r\n                                        <div className=\"message-content\">\r\n                                            <div className=\"message-text\">\r\n                                                <span className=\"message-sender\">\r\n                                                    {msg.sender === `${loggedUser.firstName} ${loggedUser.lastName}` ? 'You' : msg.sender || 'Unknown'}\r\n                                                </span>\r\n                                                {getMessageText(msg)}\r\n                                            </div>\r\n                                            <span className=\"message-timestamp\">\r\n                                                {formatTimestamp(msg.timestamp)}\r\n                                            </span>\r\n                                        </div>\r\n                                    </ListGroup.Item>\r\n                                )) : (\r\n                                    <div className=\"empty-state\">\r\n                                        <div className=\"empty-state-icon\">💭</div>\r\n                                        <p>No messages yet. Start the conversation!</p>\r\n                                    </div>\r\n                                )}\r\n                            </ListGroup>\r\n\r\n                            <Form className=\"message-input-form d-flex\" onSubmit={e => { e.preventDefault(); handleSend(); }}>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Type your message...\"\r\n                                    value={inputValueSend}\r\n                                    onChange={e => setInputValue(e.target.value)}\r\n                                    className=\"message-input me-2\"\r\n                                />\r\n                                <Button type=\"submit\" className=\"send-btn\">\r\n                                    Send 🚀\r\n                                </Button>\r\n                            </Form>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"empty-state card p-4\">\r\n                            <div className=\"empty-state-icon\">👆</div>\r\n                            <p>Select a group to start chatting!</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GroupChatApp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}